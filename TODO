
/*  $Header$
 *
 *  Copyright (c) 1987-2003 Sun Microsystems, Inc.
 *  All Rights Reserved.
 */

Revamped gcalctool (v4.2.0 onwards) TODO list.
--------------------------------------------

From Calum:
* Need to disable all the buttons that aren't valid after an "Error" has 
  occured.
* Need to fixup the icon to be the correct GNOME thing.

Others:
* Need to hook up keyboard accelerators for:
  - Control-F1 should display the tooltip help for a button. Need to then
    remove the toggling of GDK_Help and the -h command line option.
  - Control-q should terminate gcalctool.
  - Control-C and Control-V should Copy/Paste the display value from/to the
    clipboard.
* val_to_button() needs to be reworked to find Alt-<n> type buttons.
* Sometime gcalctool is initially displayed in Scientific mode, but the
  Basic Mode radio item is set in the View menu. Also the button sizes are
  incorrect.
* Check that the numeric keypad does all the right things.
* Add in an overview of the various changes since v4.1.13 to the NEWS file.
* The "*displayitem*" widget and the "*register_label<n>*" widgets background
  color aren't being set to white.
* Need to update the manual pages to reflect these changes.
* Need to create help files for gcalctool.
* Need to reduce tool tip help message sizes.
* Move .gcalctoolcf functionality into gconf resources.
* Make sure all the keyboard equivalents of each widget are working.
* Get keyboard navigation working.
* Make sure that this new gcalctool is fully accessible.
* As the user changes options, need to make sure that the current state is
  stored away in the Gconf resources.
* Improve the colors in the gcalctoolrc file.
* Track down and fixup memory leaks.

===========================================================================

Gcalctool TODO.
===============

* In fixing bug #101861 (http://bugzilla.gnome.org/show_bug.cgi?id=101861)
  it's now possible for the Memory Register window to dynamically resize
  as larger values are stored in the memory registers. Need to check with
  the HCI folks if this is acceptable.

* Implement bugtraq rfe #1190372/#1105626.
  It appears that function definitions are unable to handle all calculator
  buttons. Buttons with a keyboard equivalent that is a special key (clear 
  display) or key combination (^s - Sin) appear to be rejected in functions 
  defs.  This affects the availability of many of the calculator buttons.

* Implement bugtraq rfe #1190313.
  After a menu-button is activated via keyboard mnemonic (i.e. press M for 
  Mode, B for Base, D for Display, and T for Trig), gcalctool should validate 
  the next key pressed ([fls] for Mode, [bodh] for Base, [efs] for Display, 
  and [dgr] for Trig) and beep if it's illegal.

* Implement bugtraq rfe #4023507.
  The calculator in Scientific mode accepts hex entries of up to
  eight digits.  This was sufficient to deal with 32-bit addresses.
  When Solaris is 64-bit, the calculator will be less useful.
  Maybe there should be a Logical-64 mode.

* Fix bugtraq bug #4065378.
  Certain functions entered into gcalctool produce incorrect results.
  I entered the following functions into gcalctool:

  ((R0)-32)*(5/9)=S1

  (5/9)*(R0-32)=S0

  ((R0-32)*5)/9=S0

  The above 3 functions all do pretty much the same thing. They convert 
  Fahrenheit to Celsius. However when I store "212" in Register 0, and 
  run the first of the three functions above, the result is 21200 (and 
  we all know that 212F is 100 C). If I run the same conversion again, 
  the result is 2120000. It seems like the previous result is always 
  multiplied by 100. The other 2 functions also return incorrect results.

  Not all user defined functions behave this way. For example the Function 
  for converting Celsius to Fahrenheit worked as expected.

* Implement bugtraq rfe #4113441.
  Scientists using dtcalc under CDE would like to get deeper precision.
  The maximum accuracy depth, which is 9, is not enough for them.
  They would like to have 15 digits available.

* Implement bugtraq rfe #1122089.
  Add a log base 2 key.

* See if it's now safe to remove the "Hack Alert" code in gtk.c at about
  line 1106.

* Consider the possibility of being able to have all the mode windows
  displayed at the same time.

* As of v3.0.1. calctool was modified to have "infinite" precision
  internally. This needs to be made available to the "power" users, but
  shouldn't confuse the novice. What I suggest is to replace the Acc
  button menu, with an Acc... button which brings up a popup with a slider
  on, to allow you to set the number of numeric places. By default this
  will be 0-9. I also propose adding another X resource, which will also
  allow you to set the number of numeric places. This value can be as
  large as you want. When calctool starts up, it will look for that
  resource, and adjust the sliders maximum value appropriately.
 
  Making this addition will possibly cause the calctool numeric result to
  be larger that can fully displayed. There are two possible ways to fix
  this:

  * make the display area a scrollable canvas.
  * make the calctool numeric display a panel text item of the appropriate
    length.

* Consider adding in the ability to drag & drop from/to the display and 
  the memory registers.
 
* Consider adding in some more functions:
 
  ~ Common antilogarithm and natural antilogarithm.
  ~ Cube root key.
  ~ Root key. The y root of x.
  ~ Rectangular to polar and polar to rectangular keys.
   
* Consider adding Reverse Polish notation functionality (as an option).


MP - todo.
----------

* Shouldn't have to convert back to a double in make_number() in order
  to test if the number is too large to be displayed in fixed point.

* The cmax field for make_fixed should be dynamic, and depend upon how
  many characters can be displayed (ie. a larger calctool will be able
  to display more).

* Tidy up the code in mp.c, to eventually use no labels and goto's.

* Adjust all uses of MP...[MP_SIZE] to use a dynamic size so that it's
  possible to calculate to numbers of any length.
